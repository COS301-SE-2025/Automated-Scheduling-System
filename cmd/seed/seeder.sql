CREATE TABLE job_positions (
    position_matrix_code VARCHAR(100) PRIMARY KEY NOT NULL,
    job_title VARCHAR(255) NOT NULL,
    description TEXT,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    creation_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Create tables
CREATE TABLE employee (
    EmployeeNumber VARCHAR(200) PRIMARY KEY NOT NULL,
    FirstName VARCHAR(255),
    LastName VARCHAR(255),
    UserAccountEmail VARCHAR(255) UNIQUE NOT NULL,
    EmployeeStatus VARCHAR(100),
    TerminationDate DATE
);

-- The link between an employee and their job position(s)
CREATE TABLE employment_history (
    employment_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    employee_number VARCHAR(200) NOT NULL REFERENCES employee(EmployeeNumber) ON DELETE CASCADE,
    position_matrix_code VARCHAR(100) NOT NULL REFERENCES job_positions(position_matrix_code) ON DELETE CASCADE,
    start_date DATE NOT NULL,
    end_date DATE, -- NULL means current position
    employment_type VARCHAR(50) DEFAULT 'Primary',
    notes TEXT,
    UNIQUE(employee_number, position_matrix_code, start_date)
);

CREATE TABLE users (
    id BIGSERIAL PRIMARY KEY,
    username VARCHAR(150) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    forgot_password_link VARCHAR(255) UNIQUE,
    role VARCHAR(50) DEFAULT 'User',
    employee_number VARCHAR(200) NOT NULL,
    CONSTRAINT fk_employee FOREIGN KEY (employee_number) REFERENCES employee(EmployeeNumber) ON DELETE CASCADE
);

-- EVENTS

-- Type definition remains the same
CREATE TYPE event_source_enum AS ENUM ('LMS', 'Custom');

-- competency types, e.g. certification, licence etc.
CREATE TABLE competency_types (
    type_name VARCHAR(100) PRIMARY KEY,
    description TEXT,
    is_active BOOLEAN NOT NULL DEFAULT TRUE
);

-- Populated through LMSJobCompetencyMatrix, and when HR makes new competencies.
CREATE TABLE competency_definitions (
    competency_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    competency_name VARCHAR(255) NOT NULL,
    description TEXT,
    -- Mirrors CompetencyTypeName (e.g., 'Certification', 'Skill', 'License').
    competency_type_name VARCHAR(100) REFERENCES competency_types(type_name),
    -- Distinguish between LMS data and user-created data.
    source event_source_enum NOT NULL,
    -- Defines the validity period in months after which this competency expires (mainly for Custom Competencies).
    expiry_period_months INT NULL,
    -- Allows HR to deactivate a custom competency without deleting it, preserving history.
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    creation_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (competency_name, source)
);

-- Depends on competency_definitions.
CREATE TABLE competency_prerequisites (
    competency_id INT NOT NULL REFERENCES competency_definitions(competency_id) ON DELETE CASCADE,
    prerequisite_competency_id INT NOT NULL REFERENCES competency_definitions(competency_id) ON DELETE CASCADE,
    PRIMARY KEY (competency_id, prerequisite_competency_id)
);

-- Depends on competency_definitions.
-- Stores the definition/template for events created by HR
CREATE TABLE custom_event_definitions (
    custom_event_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    event_name VARCHAR(255) NOT NULL,
    activity_description TEXT,
    standard_duration INTERVAL,
    -- Links to the master competency table
    grants_certificate_id INT NULL REFERENCES competency_definitions(competency_id),
    facilitator VARCHAR(255),
    created_by VARCHAR(100),
    creation_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Depends on competency_definitions.
CREATE TABLE custom_job_matrix (
    custom_matrix_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    position_matrix_code VARCHAR(100) NOT NULL,
    -- Foreign key to master certification table.
    competency_id INT NOT NULL REFERENCES competency_definitions(competency_id) ON DELETE CASCADE,
    requirement_status VARCHAR(50) NOT NULL, -- e.g. 'Required', 'Optional'
    notes TEXT,
    created_by VARCHAR(100),
    creation_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_job_position FOREIGN KEY (position_matrix_code) REFERENCES job_positions(position_matrix_code) ON DELETE CASCADE
);

-- Depends on custom_event_definitions.
-- Many-to-many relationship defining prerequisites for events.
CREATE TABLE custom_event_prerequisites (
    event_id INT NOT NULL REFERENCES custom_event_definitions(custom_event_id) ON DELETE CASCADE,
    prerequisite_event_id INT NOT NULL REFERENCES custom_event_definitions(custom_event_id) ON DELETE CASCADE,
    PRIMARY KEY (event_id, prerequisite_event_id)
);

-- Depends on custom_event_definitions.
CREATE TABLE custom_event_schedules (
    custom_event_schedule_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    custom_event_id INT NOT NULL REFERENCES custom_event_definitions(custom_event_id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    event_start_date TIMESTAMPTZ NOT NULL,
    event_end_date TIMESTAMPTZ NOT NULL,
    room_name VARCHAR(100),
    maximum_attendees INT,
    minimum_attendees INT,
    status_name VARCHAR(50) DEFAULT 'Scheduled', -- e.g., 'Scheduled', 'Cancelled', 'Full'
    color VARCHAR(7) DEFAULT '#3788d8',
    creation_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- This table tracks which employee has which certification.
CREATE TABLE employee_competencies (
    employee_competency_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    employee_number VARCHAR(200) NOT NULL REFERENCES employee(EmployeeNumber) ON DELETE CASCADE,
    competency_id INT NOT NULL REFERENCES competency_definitions(competency_id) ON DELETE CASCADE,
    achievement_date DATE NOT NULL,
    expiry_date DATE,
    granted_by_schedule_id INT NULL REFERENCES custom_event_schedules(custom_event_schedule_id),
    notes TEXT,
    UNIQUE (employee_number, competency_id, achievement_date)
);

-- Indexes updated to match new column names
CREATE INDEX idx_customeventdefinition_grants_cert_id ON custom_event_definitions(grants_certificate_id);
CREATE INDEX idx_customjobmatrix_competency_id ON custom_job_matrix(competency_id);
CREATE INDEX idx_customeventschedule_custom_event_id ON custom_event_schedules(custom_event_id);

-- Insert dummy data
-- Insert data into the employee table
INSERT INTO employee (EmployeeNumber, FirstName, LastName, UserAccountEmail, EmployeeStatus, TerminationDate)
VALUES
('E001', 'John', 'Doe', 'john.doe@example.com', 'Active', NULL),
('E002', 'Jane', 'Smith', 'jane.smith@example.com', 'Active', NULL),
('E003', 'Alice', 'Johnson', 'alice.johnson@example.com', 'Terminated', '2025-06-01'),
('E004', 'Bob', 'Brown', 'bob.brown@example.com', 'Active', NULL);

-- Insert data into the users table
-- Password is set to: Pa$$w0rd!
INSERT INTO users (username, password, forgot_password_link, role, employee_number)
VALUES
('johndoe', '$2a$10$gca/UYFWZXMD/xBOLKntSeD.fFmE2IdzdqSD1qxFvcuJgDyfd17Qq', NULL, 'Admin', 'E001'),
('janesmith', '$2a$10$gca/UYFWZXMD/xBOLKntSeD.fFmE2IdzdqSD1qxFvcuJgDyfd17Qq', NULL, 'User', 'E002'),
('alicejohnson', '$2a$10$gca/UYFWZXMD/xBOLKntSeD.fFmE2IdzdqSD1qxFvcuJgDyfd17Qq', NULL, 'User', 'E003');